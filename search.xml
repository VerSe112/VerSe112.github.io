<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++实现2048 控制台界面]]></title>
    <url>%2F2017%2F07%2F28%2F2048%20C%2B%2B%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[2048 C++实现 控制台界面实现思路很简单，没有任何算法，一百五十几行代码，试试水。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;cstdlib&gt;#include&lt;ctime&gt;#include&lt;conio.h&gt;#include&lt;iomanip&gt;#include&lt;algorithm&gt;#include&lt;windows.h&gt;using namespace std;int board[4][4],score=0;//board记录方块状态，score记录得分情况int random(int a,int b) //产生随机数函数&#123; return rand()%(b-a)+a;&#125;void Interface() //界面函数&#123; system("cls"); cout&lt;&lt;setw(40)&lt;&lt;'|'&lt;&lt;"-----------------------"&lt;&lt;'|'&lt;&lt;endl; cout&lt;&lt;setw(40)&lt;&lt;'|'&lt;&lt;setw(17)&lt;&lt;"2048 by wsw"&lt;&lt;setw(7)&lt;&lt;'|'&lt;&lt;endl; cout&lt;&lt;setw(40)&lt;&lt;'|'&lt;&lt;"-----------------------"&lt;&lt;'|'&lt;&lt;endl; for(int i=0;i&lt;4;i++) &#123; cout&lt;&lt;setw(40)&lt;&lt;'|'; for(int j=0;j&lt;4;j++)&#123; if(board[i][j]) cout&lt;&lt;setw(5)&lt;&lt;board[i][j]&lt;&lt;'|'; else cout&lt;&lt;setw(5)&lt;&lt;' '&lt;&lt;'|'; &#125; cout&lt;&lt;endl&lt;&lt;setw(40)&lt;&lt;'|'&lt;&lt;"-----------------------"&lt;&lt;'|'&lt;&lt;endl; &#125; cout&lt;&lt;setw(40)&lt;&lt;" "&lt;&lt;"Score: "&lt;&lt;score&lt;&lt;endl;&#125;void init() //初始化函数&#123; system("cls"); score=0; memset(board,0,sizeof board); int xy[4]; srand((unsigned)time(0)); //随机种子 for(int i=0;i&lt;4;i++) xy[i]=random(0,4); board[xy[0]][xy[1]]=board[xy[2]][xy[3]]=2;&#125;bool end() //判断游戏是否结束&#123; for(int i=0;i&lt;4;i++) for(int j=0;j&lt;4;j++) &#123; if(!board[i][j]) return false; int x1=i+1,y1=j+1,x2=i-1,y2=j-1; if(y1&gt;=0&amp;&amp;y1&lt;4&amp;&amp;board[i][j]==board[i][y1]) return false; if(y2&gt;=0&amp;&amp;y2&lt;4&amp;&amp;board[i][j]==board[i][y2]) return false; if(x1&gt;=0&amp;&amp;x1&lt;4&amp;&amp;board[i][j]==board[x1][j]) return false; if(x2&gt;=0&amp;&amp;x2&lt;4&amp;&amp;board[i][j]==board[x2][j]) return false; &#125; return true;&#125;void gene() //随机生成2或4&#123; Sleep(100); //暂停处理 if(end()) return; int x=random(0,4),y=random(0,4); srand((unsigned)time(0)); while(board[x][y])&#123; x=random(0,4);y=random(0,4); &#125; int val=1; while(val%2) val=random(2,5); board[x][y]=val;&#125;void control() //控制函数&#123; char c; c=getch(); //直接获取键盘按键 int act=0,m=0; //先把每行每列的数据导入num数组中，再在数组中处理，处理完再倒回board数组 //act记录是否有动作发生（移动，相加），m控制每次每行每列只允许发生一次相加 if(c=='w'||c=='W')&#123; for(int i=0;i&lt;4;i++) &#123; int num[4],k=0,m=0; memset(num,0,sizeof num); for(int j=0;j&lt;4;j++) if(board[j][i]) num[k++]=board[j][i]; for(int j=0;j&lt;3;j++)&#123; if(num[j]==num[j+1]&amp;&amp;num[j]&amp;&amp;!m)&#123; num[j]+=num[j+1];num[j+1]=0;score+=2*num[j];m=1; &#125; &#125; for(int j=0;j&lt;4;j++) if(num[j]!=board[j][i]) act=1; k=0; for(int j=0;j&lt;4;j++) if(num[j]) board[k++][i]=num[j]; while(k&lt;4) board[k++][i]=0; &#125; &#125; else if(c=='s'||c=='S')&#123; for(int i=0;i&lt;4;i++) &#123; int num[4],k=0,m=0; memset(num,0,sizeof num); for(int j=3;j&gt;=0;j--) if(board[j][i]) num[k++]=board[j][i]; for(int j=0;j&lt;3;j++)&#123; if(num[j]==num[j+1]&amp;&amp;num[j]&amp;&amp;!m)&#123; num[j]+=num[j+1];num[j+1]=0;score+=2*num[j];m=1; &#125; &#125; for(int j=0;j&lt;4;j++) if(num[j]!=board[3-j][i]) act=1; k=3; for(int j=0;j&lt;4;j++) if(num[j]) board[k--][i]=num[j]; while(k&gt;=0) board[k--][i]=0; &#125; &#125; else if(c=='a'||c=='A')&#123; for(int i=0;i&lt;4;i++) &#123; int num[4],k=0,m=0; memset(num,0,sizeof num); for(int j=0;j&lt;4;j++) if(board[i][j]) num[k++]=board[i][j]; for(int j=0;j&lt;3;j++)&#123; if(num[j]==num[j+1]&amp;&amp;num[j]&amp;&amp;!m)&#123; num[j]+=num[j+1];num[j+1]=0;score+=2*num[j];m=1; &#125; &#125; for(int j=0;j&lt;4;j++) if(num[j]!=board[i][j]) act=1; k=0; for(int j=0;j&lt;4;j++) if(num[j]) board[i][k++]=num[j]; while(k&lt;4) board[i][k++]=0; &#125; &#125; else if(c=='d'||c=='D')&#123; for(int i=0;i&lt;4;i++) &#123; int num[4],k=0,m=0; memset(num,0,sizeof num); for(int j=3;j&gt;=0;j--) if(board[i][j]) num[k++]=board[i][j]; for(int j=0;j&lt;3;j++)&#123; if(num[j]==num[j+1]&amp;&amp;num[j]&amp;&amp;!m)&#123; num[j]+=num[j+1];num[j+1]=0;score+=2*num[j];m=1; &#125; &#125; for(int j=0;j&lt;4;j++) if(num[j]!=board[i][3-j]) act=1; k=3; for(int j=0;j&lt;4;j++) if(num[j]) board[i][k--]=num[j]; while(k&gt;=0) board[i][k--]=0; &#125; &#125; Interface(); if(act) gene(); Interface(); if(!end()) control(); else cout&lt;&lt;"Game Over!!!"&lt;&lt;endl;&#125;int main()&#123; int flag=1; while(flag) &#123; init(); Interface(); control(); system("pause"); &#125;&#125;]]></content>
      <categories>
        <category>小玩意</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>小游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1004 Python实现]]></title>
    <url>%2F2017%2F07%2F27%2F%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%2F</url>
    <content type="text"><![CDATA[PAT (Basic Level) Practise1004 成绩排名读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。 输入格式：每个测试输入包含1个测试用例，格式为 第1行：正整数n 第2行：第1个学生的姓名 学号 成绩 第3行：第2个学生的姓名 学号 成绩 … … … 第n+1行：第n个学生的姓名 学号 成绩其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。输出格式：对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。 12345输入样例：3Joe Math990112 89Mike CS991301 100Mary EE990830 95 123输出样例：Mike CS991301Joe Math990112 思路 使用split()分割输入的字符串，成绩放入list中，再把成绩和姓名学号在dict中对应起来 代码实现123456789n=int(input())li=[]d=&#123;&#125;while n&gt;0: str_s=input().split() li.append(int(str_s[2])) d[str_s[2]]=str_s[0]+' '+str_s[1] n-=1print('%s\n%s'%(d[str(max(li))],d[str(min(li))]),end='')]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1005 Python实现]]></title>
    <url>%2F2017%2F07%2F27%2F%E7%BB%A7%E7%BB%AD(3n%2B1)%E7%8C%9C%E6%83%B3%2F</url>
    <content type="text"><![CDATA[PAT (Basic Level) Practise1005 继续（3n+1）猜想卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。 当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。 现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。 输入格式：每个测试输入包含1个测试用例，第1行给出一个正整数K(&lt;100)，第2行给出K个互不相同的待验证的正整数n(1&lt;n&lt;=100)的值，数字间用空格隔开。 输出格式：每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。 123输入样例：63 5 6 7 8 11 12输出样例：7 6 思路 把所有计算过程中出现的数字放入set中，把输入的数据转换成int再降序排序（重要，错在这里了，str排序和int排序是不同的），再判断是否在set中出现，没出现的输出 代码实现123456789101112131415161718k=int(input())cov=set([])str_s=input().split()def fun(n): if n in cov: return while n!=1: if n%2==0: n/=2 else: n=(3*n+1)/2 cov.add(int(n))for i in str_s: fun(int(i))res=[int(i) for i in str_s]res.sort(reverse=True)count=0for i in res: if i not in cov: if count: print(' ',end='') print(i,end='') count+=1]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1002 Python实现]]></title>
    <url>%2F2017%2F07%2F26%2F%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[PAT (Basic Level) Practise1002 写出这个数读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每一位数字。 输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10100。 输出格式：在一行内输出n的各位数字之和的每一位，拼音数字间有1 空格，但一行中最后一个拼音数字后没有空格。 12输入样例：1234567890987654321123456789 12输出样例：yi san wu 思路 输入一个纯数字的字符串，把每一位字符转换成int型相加，再把相加得数按从最大位到最小位顺序，用拼音输出。使用int()转换字符成整数，再用一个list预先保存数字的拼音 代码实现123456789str_s=input()sum=0f=['ling','yi','er','san','si','wu','liu','qi','ba','jiu']for i in range(len(str_s)): sum=sum+int(str_s[i])for i in range(len(str(sum))): if i: print(' ',end='') print('%s'%(f[int(str(sum)[i])]),end='')]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1003 Python实现]]></title>
    <url>%2F2017%2F07%2F26%2F%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87!%2F</url>
    <content type="text"><![CDATA[PAT (Basic Level) Practise1003 我要通过“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。 得到“答案正确”的条件是： 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符； 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串； 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。 现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。输入格式： 每个测试输入包含1个测试用例。第1行给出一个自然数n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。 输出格式：每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。 12345678910输入样例：8PATPAATAAPATAAAAPAATAAAAxPATxPTWhateverAPAAATAA 123456789输出样例：YESYESYESYESNONONONO 思路 观察样例分析三个条件可得aPbTc形式中，a字符串包含的‘A’数目和b字符串中包含的‘A’的数目之积要等于c字符串中包含的‘A’的数目，也就是a*b=c，并且b不能等于零，P和T有切只能出现一次。第二个测试点有可能是‘P T’，我加了判断b是否有‘A’的判断就通过了 代码实现123456789101112131415161718192021222324n=int(input())res=[]for i in range(n): str_s=input() p=a1=a2=a3=t=k=0 for j in range(len(str_s)): if str_s[j]!='P' and str_s[j]!='A' and str_s[j]!='T' and str_s[j]!=' ': k=1 elif str_s[j]=='P': p+=1 elif str_s[j]=='A' and p==0: a1=a1+1 elif str_s[j]=='A' and p and t==0: a2=a2+1 elif str_s[j]=='A' and p and t: a3=a3+1 elif str_s[j]=='T': t+=1 if p==1 and a1*a2==a3 and a1+a2+a3 and t==1 and k==0 and a2: res.append('YES') else: res.append('NO')for i in range(n): print('%s'%(res[i]))]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1001 Python实现]]></title>
    <url>%2F2017%2F07%2F26%2F%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84(3n%2B1)%E7%8C%9C%E6%83%B3%2F</url>
    <content type="text"><![CDATA[PAT (Basic Level) Practise1001 害死人不偿命的(3n+1)猜想卡拉兹(Callatz)猜想： 对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展…… 我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？ 输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。 输出格式：输出从n计算到1需要的步数。 12输入样例：3 12输出样例：5 思路 使用int(input())读入n，之后while循环得出答案 代码实现12345678910n=int(input())sum=0while n!=1: sum=sum+1 if n%2==0: n=n/2 else: n=n*3+1 n=n/2print('%d'%(sum))]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
</search>